import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.*;
/**
 * This class provides interface that
 * Reads metadata about movie from the AI generated file
 * Extrapolates keywords from each movie's bio
 * Displays all these words to the user
 * Filters the movies based on these keywords
 * Optional sorting algorithm to sort alphabetically/lexographically
 * Outputs the filtered retults to text file
 */
public class MovieSelectorApp {
    /**
     * Main method that runs movie selector app
     * 
     * @throws FileNotFoundException   this is if the file path doesn't exist or is simply invalid
     */
    public static void main(String[] args) throws FileNotFoundException {
        Scanner input = new Scanner(System.in);
        List<KeywordAnalyzer> movieBank = new ArrayList<>();//stores all movie objects after analysis
        Set<String> allKeywords = new HashSet<>();//stores all unique keywords

        // Reading movies from the file copied as a path
        File movieFile = new File("C:\\Users\\kesha\\OneDrive\\Documents\\aiMovies.txt");//this is what causes the error...its just because of CodeHS, it will work in VSCode
        Scanner fileScanner = new Scanner(movieFile);//iterating through all lines of the file
        while (fileScanner.hasNextLine()) {
            String line = fileScanner.nextLine();
            String[] parts = line.split(",", 3);// split with max 3 parts
            if (parts.length == 3) {
                KeywordAnalyzer movie = new KeywordAnalyzer(parts[0].trim(), parts[1].trim(), parts[2].trim());//creating an object for each movie to add to the arrayList above
                movie.extractKeywords();
                allKeywords.addAll(movie.getKeywordList());
                movieBank.add(movie);
            }
        }
        fileScanner.close();

        // Sort and show the keyword bank so the user has something to base their input off of
        System.out.println("Databank of potential keywords:");
        List<String> sortedKeywordList = new ArrayList<>(allKeywords);
        Collections.sort(sortedKeywordList); 
        System.out.println(String.join(", ", sortedKeywordList));

        // Get user keywords
        System.out.println("\n Enter keywords you want in a movie (comma-separated):");
        String[] userInput = input.nextLine().toLowerCase().split(","); //enterring comma-separated keywords
        List<String> userKeywords = new ArrayList<>();
        for (String keyword : userInput) {
            if (!keyword.trim().isEmpty()) {
                userKeywords.add(keyword.trim()); //.trim is unnessecary, but it removes the remaining space...just for aesthetic
            }
        }

        // Filter matching movies
        List<UserPreferenceFilter> matchingMovies = new ArrayList<>();
        for (KeywordAnalyzer movie : movieBank) {
            //creating an object from each movie
            UserPreferenceFilter filtered = new UserPreferenceFilter(
                    movie.getTitle(), movie.getGenre(), movie.getDescription());
            filtered.checkMatch(userKeywords);//checking if matches userPreference
            if (filtered.isMatch()) {//if so, add to list!
                matchingMovies.add(filtered);
            }
        }

        // Optional sort (promts user after they enter in keywords)
        if (!matchingMovies.isEmpty()) {
            System.out.println("Sort results alphabetically by title? (yes/no)");
            String sortChoice = input.nextLine().trim().toLowerCase();
            if (sortChoice.equals("yes")) {
                selectionSortByTitle(matchingMovies);//a call to the method below to sort
                System.out.println("Sorted using selection sort.");
            }

            //Write this into new file
            PrintWriter writer = new PrintWriter("customMovieList.txt");//a new file for movie results
            for (UserPreferenceFilter movie : matchingMovies) {//shorthand for loop, revisited this using FreeCodeCamp.org
                writer.println(movie.toString());//printing out the info of each movie
            }
            writer.close();
            System.out.println("Output saved to customMovieList.txt");//on VSCode, the text file should appear at the top of the file directory
        } else {
            System.out.println("No matching movies found.");//in the rare event that none of the characteristics pop up in any of the movies generated by the Ai movie txt file...
        }

        input.close();//closing the scanner
    }
    /** sorts list of UserPreferenceFilter objects lexographically by title!
     * This comparison is NOT case sensitive
     * 
     * @param movies     a list of movies to sort
     */
//IMPORTANT: Selection sort mechanism (had to use AI to modify a bit as it proved to be tricky), also case-insensitive
    public static void selectionSortByTitle(List<UserPreferenceFilter> movies) {
        for (int i = 0; i < movies.size() - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < movies.size(); j++) {
                if (movies.get(j).getTitle().compareToIgnoreCase(movies.get(minIndex).getTitle()) < 0) {
                    minIndex = j;//getting infex of first title alphabetically
                }
            }//swapping the current movie with the one having smallest title
            UserPreferenceFilter temp = movies.get(i);
            movies.set(i, movies.get(minIndex));
            movies.set(minIndex, temp);
        }
    }
}